spring.application.name: simppl-api
spring.profiles.default: local
spring:
  config:
    import:
      - optional:file:.env[.properties]
      - application-aws.yaml

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus

---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:mysql://localhost:3306/local
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: username
    password: password
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: create
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        highlight_sql: true
        default_batch_fetch_size: 100
  data:
    redis:
      host: localhost
      port: 6379
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true

server:
  port: 8080
app:
  auth:
    token-secret: simppl-api-local-token-secret-not-use-in-production
    token-timeout-ms: 3600000
    refresh-token-timeout-ms: 86400000
  cors:
    allowed-origins: "*"

logging:
  level:
    org.hibernate.orm.jdbc.bind: trace
    org.springframework.web.client: debug

---
spring:
  config:
    activate:
      on-profile:
        - dev
        - prod
  datasource:
    url: jdbc:postgresql://${ DB_URL }
    driver-class-name: org.postgresql.Driver
    username: ${ DB_USERNAME }
    password: ${ DB_PASSWORD }
    hikari:
      maximum-pool-size: ${ DB_POOL_SIZE }
      connection-timeout: ${ DB_CONNECTION_TIMEOUT }
      keepalive-time: ${ DB_KEEPALIVE_TIME }
      validation-timeout: ${ DB_VALIDATION_TIMEOUT }
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        default_batch_fetch_size: ${ JPA_BATCH_SIZE }
  data:
    redis:
      host: ${ REDIS_HOST}
      port: ${ REDIS_PORT}

server:
  port: ${ SERVER_PORT}

app:
  auth:
    token-secret: ${ ACCESS_TOKEN_SECRET }
    token-timeout-ms: ${ ACCESS_TOKEN_TIMEOUT }
    refresh-token-timeout-ms: ${ REFRESH_TOKEN_TIMEOUT }
  cors:
    allowed-origins: ${ CORS_ALLOWED_ORIGINS }

